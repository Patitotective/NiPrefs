TomlArray	niprefs/nodeutils.html#TomlArray	nodeutils: TomlArray	
TomlTables	niprefs/nodeutils.html#TomlTables	nodeutils: TomlTables	
newTInt	niprefs/nodeutils.html#newTInt,int64	nodeutils: newTInt(val: int64 = default int64): TomlValueRef	
newTFloat	niprefs/nodeutils.html#newTFloat,float64	nodeutils: newTFloat(val: float64 = default float64): TomlValueRef	
newTBool	niprefs/nodeutils.html#newTBool,bool	nodeutils: newTBool(val: bool = default bool): TomlValueRef	
newTDateTime	niprefs/nodeutils.html#newTDateTime,TomlDateTime	nodeutils: newTDateTime(val: TomlDateTime = default TomlDateTime): TomlValueRef	
newTString	niprefs/nodeutils.html#newTString,string	nodeutils: newTString(val: string = default string): TomlValueRef	
newTArray	niprefs/nodeutils.html#newTArray,openArray[TomlValueRef]	nodeutils: newTArray(val: openArray[TomlValueRef] = default TomlArray): TomlValueRef	
newTTables	niprefs/nodeutils.html#newTTables,openArray[TomlTableRef]	nodeutils: newTTables(val: openArray[TomlTableRef] = default TomlTables): TomlValueRef	
newTTable	niprefs/nodeutils.html#newTTable,TomlTableRef	nodeutils: newTTable(val: TomlTableRef = new TomlTableRef): TomlValueRef	
newTTable	niprefs/nodeutils.html#newTTable,openArray[]	nodeutils: newTTable(pairs: openArray[(string, TomlValueRef)]): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,int64	nodeutils: newTNode(val: int64): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,float64	nodeutils: newTNode(val: float64): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,bool	nodeutils: newTNode(val: bool): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,TomlDateTime	nodeutils: newTNode(val: TomlDateTime): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,string	nodeutils: newTNode(val: string): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,openArray[TomlValueRef]	nodeutils: newTNode(val: openArray[TomlValueRef]): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,openArray[TomlTableRef]	nodeutils: newTNode(val: openArray[TomlTableRef]): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,TomlTableRef	nodeutils: newTNode(val: TomlTableRef): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,openArray[]	nodeutils: newTNode(val: openArray[(string, TomlValueRef)]): TomlValueRef	
newTNode	niprefs/nodeutils.html#newTNode,TomlValueRef	nodeutils: newTNode(val: TomlValueRef): TomlValueRef	
getInt	niprefs/nodeutils.html#getInt,TomlValueRef	nodeutils: getInt(node: TomlValueRef): int64	
getFloat	niprefs/nodeutils.html#getFloat,TomlValueRef	nodeutils: getFloat(node: TomlValueRef): float64	
getBool	niprefs/nodeutils.html#getBool,TomlValueRef	nodeutils: getBool(node: TomlValueRef): bool	
getDateTime	niprefs/nodeutils.html#getDateTime,TomlValueRef	nodeutils: getDateTime(node: TomlValueRef): TomlDateTime	
getString	niprefs/nodeutils.html#getString,TomlValueRef	nodeutils: getString(node: TomlValueRef): string	
getArray	niprefs/nodeutils.html#getArray,TomlValueRef	nodeutils: getArray(node: TomlValueRef): TomlArray	
getTables	niprefs/nodeutils.html#getTables,TomlValueRef	nodeutils: getTables(node: TomlValueRef): TomlTables	
getTable	niprefs/nodeutils.html#getTable,TomlValueRef	nodeutils: getTable(node: TomlValueRef): TomlTableRef	
toToml	niprefs/nodeutils.html#toToml.m,untyped	nodeutils: toToml(obj: untyped): TomlValueRef	
toTTables	niprefs/nodeutils.html#toTTables.m,untyped	nodeutils: toTTables(obj: untyped): TomlValueRef	
toTTable	niprefs/nodeutils.html#toTTable.t,untyped	nodeutils: toTTable(body: untyped): TomlTableRef	
`[]`	niprefs/nodeutils.html#[],TomlValueRef,string	nodeutils: `[]`(node: TomlValueRef; name: string): TomlValueRef	
`[]`	niprefs/nodeutils.html#[],TomlValueRef,int	nodeutils: `[]`(node: TomlValueRef; index: int): TomlValueRef	
`[]=`	niprefs/nodeutils.html#[]=,TomlValueRef,int,TomlValueRef	nodeutils: `[]=`(node: TomlValueRef; index: int; val: TomlValueRef)	
`[]=`	niprefs/nodeutils.html#[]=,TomlValueRef,int,TomlTableRef	nodeutils: `[]=`(node: TomlValueRef; index: int; val: TomlTableRef)	
`[]=`	niprefs/nodeutils.html#[]=,TomlValueRef,int,T	nodeutils: `[]=`[T: not TomlValueRef](node: TomlValueRef; index: int; val: T)	
`[]=`	niprefs/nodeutils.html#[]=,TomlValueRef,string,T	nodeutils: `[]=`[T: not TomlValueRef](node: TomlValueRef; key: string; val: T)	
`{}=`	niprefs/nodeutils.html#{}=,TomlValueRef,varargs[string],T	nodeutils: `{}=`[T: not TomlValueRef](node: TomlValueRef; keys: varargs[string]; value: T)	
`$`	niprefs/nodeutils.html#$,TomlTime	nodeutils: `$`(time: TomlTime): string	
`$`	niprefs/nodeutils.html#$,TomlDate	nodeutils: `$`(date: TomlDate): string	
`$`	niprefs/nodeutils.html#$,TomlTimeZone	nodeutils: `$`(zone: TomlTimeZone): string	
`$`	niprefs/nodeutils.html#$,TomlDateTime	nodeutils: `$`(datetime: TomlDateTime): string	
`$`	niprefs/nodeutils.html#$,TomlValue	nodeutils: `$`(node: TomlValue): string	
`$`	niprefs/nodeutils.html#$,TomlValueRef	nodeutils: `$`(node: TomlValueRef): string	
`==`	niprefs/nodeutils.html#==,TomlValueRef,T	nodeutils: `==`[T: not TomlValueRef](node: TomlValueRef; val: T): bool	
tDateTime	niprefs/nodeutils.html#tDateTime,Option[TomlDate],Option[TomlTime],Option[TomlTimeZone]	nodeutils: tDateTime(date: Option[TomlDate] = none(TomlDate);\n          time: Option[TomlTime] = none(TomlTime);\n          zone: Option[TomlTimeZone] = none(TomlTimeZone)): TomlDateTime	
tDateTime	niprefs/nodeutils.html#tDateTime,string	nodeutils: tDateTime(source: string): TomlDateTime	
tDate	niprefs/nodeutils.html#tDate,range[],range[],range[]	nodeutils: tDate(year: range[0 .. 9999] = 0; month: range[1 .. 12] = 1;\n      day: range[1 .. 31] = 1): TomlDate	
tDate	niprefs/nodeutils.html#tDate,string	nodeutils: tDate(source: string): TomlDate	
tTime	niprefs/nodeutils.html#tTime,range[],range[],range[],int	nodeutils: tTime(hour: range[0 .. 23] = 0; minute: range[0 .. 59]; second: range[0 .. 60];\n      subsecond: int = 0): TomlTime	
tTime	niprefs/nodeutils.html#tTime,string	nodeutils: tTime(source: string): TomlTime	
tTimeZone	niprefs/nodeutils.html#tTimeZone,int,int	nodeutils: tTimeZone(positiveShift = false; hourShift, minuteShift: int = 0): TomlTimeZone	
len	niprefs/nodeutils.html#len,TomlValueRef	nodeutils: len(node: TomlValueRef): int	
add	niprefs/nodeutils.html#add,TomlValueRef,TomlTableRef	nodeutils: add(node: TomlValueRef; table: TomlTableRef)	
add	niprefs/nodeutils.html#add,TomlValueRef,TomlValueRef	nodeutils: add(node: TomlValueRef; val: TomlValueRef)	
add	niprefs/nodeutils.html#add,TomlValueRef,T	nodeutils: add[T: not TomlValueRef](node: TomlValueRef; val: T)	
add	niprefs/nodeutils.html#add,TomlValueRef,string	nodeutils: add(node: TomlValueRef; str: string)	
add	niprefs/nodeutils.html#add,TomlValueRef,char	nodeutils: add(node: TomlValueRef; chr: char)	
delete	niprefs/nodeutils.html#delete,TomlValueRef,int	nodeutils: delete(node: TomlValueRef; index: int)	
contains	niprefs/nodeutils.html#contains,TomlValueRef,TomlTableRef	nodeutils: contains(node: TomlValueRef; val: TomlTableRef): bool	
contains	niprefs/nodeutils.html#contains,TomlValueRef,TomlValueRef	nodeutils: contains(node: TomlValueRef; val: TomlValueRef): bool	
contains	niprefs/nodeutils.html#contains,TomlValueRef,string	nodeutils: contains(node: TomlValueRef; str: string): bool	
contains	niprefs/nodeutils.html#contains,TomlValueRef,char	nodeutils: contains(node: TomlValueRef; chr: char): bool	
contains	niprefs/nodeutils.html#contains,TomlValueRef,T	nodeutils: contains[T: not TomlValueRef](node: TomlValueRef; val: T): bool	
hasKey	niprefs/nodeutils.html#hasKey,TomlValueRef,varargs[string]	nodeutils: hasKey(node: TomlValueRef; keys: varargs[string]): bool	
items	niprefs/nodeutils.html#items.i,TomlValueRef	nodeutils: items(node: TomlValueRef): TomlValueRef	
pairs	niprefs/nodeutils.html#pairs.i,TomlValueRef	nodeutils: pairs(node: TomlValueRef): (string, TomlValueRef)	
